name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: gtexviewer
            asset_name: gtexviewer-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            artifact_name: gtexviewer.exe
            asset_name: gtexviewer-windows-x86_64
          - os: macos-latest
            artifact_name: gtexviewer
            asset_name: gtexviewer-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        target: ${{ matrix.target }}
    
    - name: Install Zig
      if: matrix.target == 'x86_64-pc-windows-gnu'
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: 0.13.0
    
    - name: Install cargo-zigbuild
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: cargo install cargo-zigbuild

    - name: Install cargo-bundle for macOS
      if: runner.os == 'macOS'
      run: cargo install cargo-bundle

    - name: Setup cross-compilation environment
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        C:\msys64\usr\bin\pacman.exe -S --noconfirm mingw-w64-x86_64-toolchain mingw-w64-x86_64-dav1d mingw-w64-x86_64-pkg-config
        echo "PKG_CONFIG_PATH=C:\msys64\mingw64\lib\pkgconfig" >> $env:GITHUB_ENV
        echo "PKG_CONFIG=C:\msys64\mingw64\bin\pkg-config.exe" >> $env:GITHUB_ENV
        echo "PKG_CONFIG_ALLOW_CROSS=1" >> $env:GITHUB_ENV
        echo "C:\msys64\mingw64\bin" >> $env:GITHUB_PATH
        echo "CARGO_ZIGBUILD_ZIG_CC_EXTRA_ARGS=--sysroot=C:\msys64\mingw64 -IC:\msys64\mingw64\include" >> $env:GITHUB_ENV

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev pkg-config libdav1d-dev libc++-dev libc++abi-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install dav1d

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-release-${{ matrix.target }}-
          ${{ runner.os }}-cargo-release-
          ${{ runner.os }}-cargo-

    - name: Build release
      run: |
        if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
          cargo zigbuild --target x86_64-pc-windows-gnu --release --verbose
        elif [ "${{ runner.os }}" = "macOS" ]; then
          cargo build --release --verbose
          cargo bundle --release
        elif [ -n "${{ matrix.target }}" ]; then
          cargo build --release --verbose --target ${{ matrix.target }}
        else
          cargo build --release --verbose
        fi

    - name: Create macOS DMG
      if: runner.os == 'macOS'
      run: |
        # Debug: Check what cargo bundle actually created
        echo "Checking target/release/bundle structure:"
        find target/release/bundle -name "*.app" -type d 2>/dev/null || echo "No .app bundles found"
        ls -la target/release/bundle/ 2>/dev/null || echo "No bundle directory found"
        
        mkdir -p dist
        
        # Copy the app bundle created by cargo bundle
        if [ -d "target/release/bundle/osx/gTexViewer.app" ]; then
          cp -r target/release/bundle/osx/gTexViewer.app dist/
        else
          echo "App bundle not found at expected location"
          exit 1
        fi
        
        # Create Applications link for easy installation
        ln -s /Applications dist/Applications
        
        echo "Contents of dist folder:"
        ls -la dist/
        
        # Create DMG with the app bundle
        hdiutil create -volname "gTexViewer" -srcfolder "dist/" -ov -format UDZO "${{ matrix.asset_name }}.dmg"

    - name: Create Windows ZIP
      if: runner.os == 'Windows'
      run: |
        7z a ${{ matrix.asset_name }}.zip ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Create Linux archive
      if: runner.os == 'Linux'
      run: |
        if [ -n "${{ matrix.target }}" ]; then
          tar -czf ${{ matrix.asset_name }}.tar.gz -C target/${{ matrix.target }}/release ${{ matrix.artifact_name }}
        else
          tar -czf ${{ matrix.asset_name }}.tar.gz -C target/release ${{ matrix.artifact_name }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          ${{ matrix.asset_name }}.zip
          ${{ matrix.asset_name }}.dmg
          ${{ matrix.asset_name }}.tar.gz
        retention-days: 1

  create-release:
    name: Create Release
    needs: build-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create GitHub Release
      run: |
        gh release create ${{ inputs.version }} \
          --title "${{ inputs.version }}" \
          --generate-notes \
          ./artifacts/*/* 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}